{"cells":[{"cell_type":"markdown","metadata":{"id":"Bu5gIJfHNPHw"},"source":["ФИО:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CbHI8c7cM9Eg"},"outputs":[],"source":["Фахретдинов Адель Маратович"]},{"cell_type":"markdown","metadata":{"id":"VrNrBpmocGRd"},"source":["# **Задание 1**"]},{"cell_type":"markdown","metadata":{"id":"XhV1bnm1bR2h"},"source":["\n","\n","Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени\n","\n","Дано:\n","\n","```\n","{\"Alice\": 25, \"Bob\": 30, \"Charlie\": 35}\n","```\n","\n","Вввод:\n","\n","\n","```\n","Alice\n","```\n","\n","Вывод:\n","\n","\n","```\n","Alice 25\n","```\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9T0nNFCEbpaF"},"outputs":[],"source":["my_dict = {\"Alice\": 25, \"Bob\": 30, \"Charlie\": 35}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"PElJj6DvsgjD","executionInfo":{"status":"error","timestamp":1733308999033,"user_tz":-300,"elapsed":7548,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"1885ad04-728b-4b3c-9e73-5e4d4db0c5e2"},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-aae6aedb2dcd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Введите имя'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmy_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"Alice\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Alice\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32melif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmy_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"Bob\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Bob\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["name = input('Введите имя')\n","if name in my_dict.keys() and name == \"Alice\":\n","  print(my_dict[\"Alice\"])\n","elif name in my_dict.keys() and name == \"Bob\":\n","  print(my_dict[\"Bob\"])\n","elif name in my_dict.keys() and name == \"Charlie\":\n","  print(my_dict[\"Charlie\"])"]},{"cell_type":"markdown","metadata":{"id":"lpjJz-_YcJ-t"},"source":["# **Задание 2**\n"]},{"cell_type":"markdown","metadata":{"id":"tMEsAB4rUiWW"},"source":["\n","\n","Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка\n","\n","Ввод:\n","\n","```\n","1, 2, 3, 4, 5, 6, 7, 8, 9\n","```\n","\n","Вывод:\n","\n","\n","```\n","20\n","```\n","\n","***Запрещено:***\n","\n","*   Использование готовых функций для суммирования чисел\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wDNUFLeqNQS_"},"outputs":[],"source":["lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n","sm = 0\n","for x in list:\n","   if x % 2 == 0 :\n","       sm += x\n","print(sm)"]},{"cell_type":"markdown","metadata":{"id":"WT_v-vz1dUZJ"},"source":["# **Задание 3**"]},{"cell_type":"markdown","metadata":{"id":"ZI5Xeh2DdXgF"},"source":["Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов\n","\n","\n","Дано:\n","\n","```\n","fruits_and_colors = {\n","    \"apple\": \"red\",\n","    \"banana\": \"yellow\",\n","    \"mango\": \"yellow\",\n","    \"orange\": \"orange\",\n","    \"lemon\": \"yellow\",\n","    \"grape\": \"purple\"\n","}\n","```\n","\n","Вывод:\n","\n","\n","```\n","Yellow fruits:\n","banana\n","lemon\n","mango\n","```\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aNzFTkhKdkTG"},"outputs":[],"source":["fruits_and_colors = {\n","    \"apple\": \"red\",\n","    \"banana\": \"yellow\",\n","    \"mango\": \"yellow\",\n","    \"orange\": \"orange\",\n","    \"lemon\": \"yellow\",\n","    \"grape\": \"purple\"\n","}\n","for k,v in fruits_and_colors.items():\n","  if fruits_and_colors.values == \"yellow\":\n","    print(fruits_and_colors.keys())"]},{"cell_type":"markdown","metadata":{"id":"iHtMGt2icM7w"},"source":["# **Задание 4**\n"]},{"cell_type":"markdown","metadata":{"id":"rS3THsnBQ_EB"},"source":["\n","\n","Дан словарь, необходимо написать функцию меняющую ключ и значение местами\n","\n","Дано:\n","\n","\n","```\n","{\"a\": 1, \"b\": 2, \"c\": 3}\n","```\n","\n","Вывод:\n","\n","```\n","{1: 'a', 2: 'b', 3: 'c'}\n","```\n","\n"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"MNRusyLDcQ59","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734111952037,"user_tz":-300,"elapsed":290,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"da13c2fc-307c-4708-efaf-38c86abdc30d"},"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 'a', 2: 'b', 3: 'c'}\n"]}],"source":["dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}\n","\n","new_dictionary = {meaning: key for key, meaning in dictionary.items()}\n","print(new_dictionary)"]},{"cell_type":"markdown","metadata":{"id":"x6ff5nd0cUxD"},"source":["# **Задание 5**"]},{"cell_type":"markdown","metadata":{"id":"ypQNHOG4NQz3"},"source":["Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество символов\n","\n","**Критерии**\n","\n","\n","*   Словарь необходимо отсортировать по убыванию количества элементов в списке.\n","*   Подсчет элементов должен быть реализован в отдельной функции\n","*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции\n","\n","\n","\n","\n","Дано:\n","```\n","['apple','banana','orange','apple','apple','banana']\n","```\n","\n","\n","Вывод:\n","```\n","{'apple':3, 'banana': 2, 'orange': 1}\n","```\n","\n","***Запрещено:***\n","\n","*   Использование готовых функций для сортировки\n","*   Использование готовых функций для подсчета элементов\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J10PjdVQUbyq"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"d7fDUr2WcY_G"},"source":["# **Задание 6**"]},{"cell_type":"markdown","metadata":{"id":"m11qdVhSWBi7"},"source":["Дан словарь, содержащий информацию о людях, необходимо:\n","\n","\n","\n","*   Вывести всех людей старше 30 лет\n","*   Вывести список городов и количество людей из словаря проживающих в них\n","*   Вывести список профессий и список людей для каждой профессии\n","\n","**Критерии**\n","\n","Каждый из пунктов необходимо реализовать в виде функции\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"lSNtB39OWtFl","executionInfo":{"status":"ok","timestamp":1734113274818,"user_tz":-300,"elapsed":269,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}}},"outputs":[],"source":["people_info = {\n","    \"Alice\": {\"age\": 25, \"city\": \"New York\", \"occupation\": \"Engineer\"},\n","    \"Bob\": {\"age\": 30, \"city\": \"Los Angeles\", \"occupation\": \"Designer\"},\n","    \"Charlie\": {\"age\": 35, \"city\": \"Chicago\", \"occupation\": \"Teacher\"},\n","    \"Diana\": {\"age\": 28, \"city\": \"Miami\", \"occupation\": \"Doctor\"},\n","    \"Ethan\": {\"age\": 40, \"city\": \"Seattle\", \"occupation\": \"Chef\"},\n","    \"Frank\": {\"age\": 32, \"city\": \"Atlanta\", \"occupation\": \"Lawyer\"},\n","    \"Gabriella\": {\"age\": 29, \"city\": \"San Francisco\", \"occupation\": \"Software Engineer\"},\n","    \"Harrison\": {\"age\": 38, \"city\": \"Denver\", \"occupation\": \"Architect\"},\n","    \"Isabella\": {\"age\": 26, \"city\": \"Washington D.C.\", \"occupation\": \"Journalist\"},\n","    \"Julian\": {\"age\": 42, \"city\": \"Miami\", \"occupation\": \"Musician\"},\n","    \"Kate\": {\"age\": 31, \"city\": \"Philadelphia\", \"occupation\": \"Nurse\"},\n","    \"Lucas\": {\"age\": 36, \"city\": \"Nashville\", \"occupation\": \"Businessman\"},\n","    \"Mia\": {\"age\": 27, \"city\": \"Atlanta\", \"occupation\": \"Artist\"},\n","    \"Natalie\": {\"age\": 39, \"city\": \"Portland\", \"occupation\": \"Writer\"},\n","    \"Oliver\": {\"age\": 44, \"city\": \"Minneapolis\", \"occupation\": \"Professor\"},\n","    \"Penelope\": {\"age\": 33, \"city\": \"San Diego\", \"occupation\": \"Marketing Manager\"},\n","    \"Quincy\": {\"age\": 41, \"city\": \"Nashville\", \"occupation\": \"Singer\"},\n","    \"Rachel\": {\"age\": 34, \"city\": \"Cleveland\", \"occupation\": \"Teacher\"},\n","    \"Sophia\": {\"age\": 29, \"city\": \"Nashville\", \"occupation\": \"Engineer\"},\n","    \"Tessa\": {\"age\": 37, \"city\": \"Miami\", \"occupation\": \"Lawyer\"}\n","}"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"qcLO5eQwXkNK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734113574987,"user_tz":-300,"elapsed":271,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"9f87cd30-2de1-4954-a26a-57e616286b4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Люди старше 30 лет: {'Julian', 'Oliver', 'Charlie', 'Penelope', 'Rachel', 'Natalie', 'Lucas', 'Kate', 'Ethan', 'Quincy', 'Harrison', 'Frank', 'Tessa'}\n","Количество людей в городах: {'New York': 1, 'Los Angeles': 1, 'Chicago': 1, 'Miami': 3, 'Seattle': 1, 'Atlanta': 2, 'San Francisco': 1, 'Denver': 1, 'Washington D.C.': 1, 'Philadelphia': 1, 'Nashville': 3, 'Portland': 1, 'Minneapolis': 1, 'San Diego': 1, 'Cleveland': 1}\n","Люди и их профессии: {'Engineer': ['Alice', 'Sophia'], 'Designer': ['Bob'], 'Teacher': ['Charlie', 'Rachel'], 'Doctor': ['Diana'], 'Chef': ['Ethan'], 'Lawyer': ['Frank', 'Tessa'], 'Software Engineer': ['Gabriella'], 'Architect': ['Harrison'], 'Journalist': ['Isabella'], 'Musician': ['Julian'], 'Nurse': ['Kate'], 'Businessman': ['Lucas'], 'Artist': ['Mia'], 'Writer': ['Natalie'], 'Professor': ['Oliver'], 'Marketing Manager': ['Penelope'], 'Singer': ['Quincy']}\n"]}],"source":["def people_30(people_info):\n","    return {name for name, info in people_info.items() if info[\"age\"] > 30}\n","\n","def people_city(people_info):\n","    cities = {}\n","    for info in people_info.values():\n","        city = info[\"city\"]\n","        if city in cities:\n","            cities[city] += 1\n","        else:\n","            cities[city] = 1\n","    return cities\n","\n","def people_occupation(people_info):\n","    occupation = {}\n","    for name, info in people_info.items():\n","        occupation1 = info[\"occupation\"]\n","        if occupation1 in occupation:\n","            occupation[occupation1].append(name)\n","        else:\n","            occupation[occupation1] = [name]\n","    return occupation\n","\n","print('Люди старше 30 лет:', people_30(people_info))\n","print('Количество людей в городах:', people_city(people_info))\n","print('Люди и их профессии:', people_occupation(people_info))"]},{"cell_type":"markdown","metadata":{"id":"27IuB2YScezw"},"source":["# **Задание 7**"]},{"cell_type":"markdown","metadata":{"id":"Fd95-S9cYhct"},"source":["Задание: Разработка системы отзывов о предметах\n","\n","Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.\n","\n","**Функционал:**\n","\n","*   Добавление отзыва и оценки:\n","   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.\n","   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).\n","*   Просмотр отзывов и оценок:\n","   *   Пользователь может запросить отзывы для указанного предмета.\n","   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.\n","*   Удаление отзыва:\n","   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.\n","   *   Программа должна обработать ситуацию, когда индекс введен неправильно.\n","*   Вычисление среднего балла по предмету:\n","   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.\n","   *   Если отзывов нет, программа должна сообщить об этом.\n","\n","\n","**Критерии:**\n","\n","*   Код должен быть оформлен в виде функций\n","*   Необходимо обрабатывать неправильный ввод пользователя\n","*   Должны быть комментарии к функциям\n","*   Присутсвует весь дополнительный функционал\n","\n","\n","\n","**Опционально:**\n","\n","Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kzucJrCUa0o7"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1TEBJaKANAI0JxDY268tNeKGpHMChb2sK","timestamp":1729071705930}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}