{"cells":[{"cell_type":"markdown","metadata":{"id":"M9IlAZAPBBm9"},"source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"]},{"cell_type":"markdown","metadata":{"id":"ZLVI_WIcuT56"},"source":["ФИО:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3AfG_Tal0P2S"},"outputs":[],"source":["Фахретдинов Адель Маратович"]},{"cell_type":"markdown","metadata":{"id":"Gtm1UjYgDlY7"},"source":["## Задание 1. HTTP-запросы, ответы и погода"]},{"cell_type":"markdown","metadata":{"id":"FtjnLNIKzfMZ"},"source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":339,"status":"ok","timestamp":1733230471036,"user":{"displayName":"Adel Show","userId":"11599108646545333078"},"user_tz":-300},"id":"5Mbs40_buVRV","outputId":"b1b27497-384d-420a-e868-02b58cbc4302"},"outputs":[{"name":"stdout","output_type":"stream","text":["Сегодня (3.12) погода 1.5°C, выгляни в окно и посмотри сам\n"]}],"source":["import requests\n","from datetime import datetime\n","\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","\n","def clear_data(data):\n","    current_date = datetime.today().date()\n","    current_date = f'{current_date.day}.{current_date.month}'\n","\n","\n","    temperature = data['current']['temperature_2m']\n","    temperature_format = data['current_units']['temperature_2m']\n","\n","\n","    weather_code = data['current']['weather_code']\n","\n","\n","    if weather_code == 2:\n","        weather = 'нет осадков, ясно'\n","    elif weather_code in [45, 48]:\n","        weather = 'нет осадков, туман'\n","    else:\n","        weather = 'выгляни в окно и посмотри сам'\n","    message = f'Сегодня ({current_date}) погода {temperature}{temperature_format}, {weather}'\n","    return message\n","\n","\n","\n","\n","\n","\n","def main(params):\n","    url = f'https://api.open-meteo.com/v1/forecast?latitude={params[0]}&longitude={params[1]}&current=temperature_2m,weather_code&timezone=Europe%2FMoscow&forecast_days=1'\n","    data = send_request(url)\n","    message = clear_data(data)\n","    print(message)\n","\n","\n","\n","params = [56.1232, 30.4982]\n","main(params)"]},{"cell_type":"markdown","metadata":{"id":"FYjU9WmVDoGs"},"source":["## Задание 2. HTTP-запросы, ответы и покемоны"]},{"cell_type":"markdown","metadata":{"id":"oZ1guEbl0PZm"},"source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":3305,"status":"ok","timestamp":1730287982065,"user":{"displayName":"Adel Show","userId":"11599108646545333078"},"user_tz":-300},"id":"swQJIdUFJZLa","outputId":"dce02ee6-3af6-4f71-d24c-192341879cd5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n"]}],"source":["pip install requests"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":720},"id":"uW_aej7nM2yD","outputId":"6c76da9f-c894-4620-a4ab-a414a7275d34","executionInfo":{"status":"error","timestamp":1734504740928,"user_tz":-300,"elapsed":2775,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Список первых 20 покемонов:\n","bulbasaur\n","ivysaur\n","venusaur\n","charmander\n","charmeleon\n","charizard\n","squirtle\n","wartortle\n","blastoise\n","caterpie\n","metapod\n","butterfree\n","weedle\n","kakuna\n","beedrill\n","pidgey\n","pidgeotto\n","pidgeot\n","rattata\n","raticate\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-33145d80e12c>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0minput_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введи имя покемона: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0mpokemon_url\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"https://pokeapi.co/api/v2/pokemon/{input_name}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","url = \"https://pokeapi.co/api/v2/pokemon?limit=20\"\n","data = send_request(url)\n","\n","if data:\n","    pokemon_names = [pokemon['name'] for pokemon in data['results']]\n","    print(\"Список первых 20 покемонов:\")\n","    for name in pokemon_names:\n","        print(name)\n","\n","    input_name = input(\"Введи имя покемона: \")\n","\n","    pokemon_url = f\"https://pokeapi.co/api/v2/pokemon/{input_name}\"\n","    pokemon_data = send_request(pokemon_url)\n","\n","    if pokemon_data:\n","        name = pokemon_data['name'].capitalize()\n","        types = [t['type']['name'] for t in pokemon_data['types']]\n","        weight = pokemon_data['weight']\n","        height = pokemon_data['height']\n","        abilities = [ability['ability']['name'] for ability in pokemon_data['abilities']]\n","\n","        print(f\"Имя покемона: {name}\")\n","        print(f\"Тип: {', '.join(types)}\")\n","        print(f\"Вес: {weight}\")\n","        print(f\"Рост: {height}\")\n","        print(f\"Способности: {', '.join(abilities)}\")"]},{"cell_type":"markdown","metadata":{"id":"Ci07uZdADue9"},"source":["## Задание 3. HTTP-запросы, ответы и посты"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3681,"status":"ok","timestamp":1734164949761,"user":{"displayName":"Adel Show","userId":"11599108646545333078"},"user_tz":-300},"id":"JkFmivjp25NL","outputId":"af9c1814-e6c2-4209-88ff-ebee389512e3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n"]}],"source":["pip install requests"]},{"cell_type":"markdown","metadata":{"id":"h194KTer1-B3"},"source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"error","timestamp":1734504896961,"user_tz":-300,"elapsed":249,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"cb6e26c7-766c-4d54-86c4-d09ec0d25a75"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid decimal literal (<ipython-input-5-b7db870946bc>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-b7db870946bc>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    2import requests\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"]}],"source":["2import requests\n","\n","def get_posts():\n","    url = \"https://jsonplaceholder.typicode.com/posts\"\n","    response = requests.get(url)\n","    return response.json()\n","\n","def get_post_id(post_id):\n","    url = f\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\n","    response = requests.get(url)\n","    return response.json()\n","\n","def post_info(post):\n","    print(f\"ID: {post['id']}\")\n","    print(f\"Заголовок: {post['title']}\")\n","    print(f\"Содержание: {post['body']}\")\n","    print(f\"Автор ID: {post['userId']}\")\n","\n","posts = get_posts()\n","print(f\"Всего постов: {len(posts)}\")\n","\n","post_id = int(input(\"Введи ID поста: \"))\n","post = get_post_id(post_id)\n","\n","post_info(post)"]},{"cell_type":"markdown","metadata":{"id":"rtwepQvJDy9N"},"source":["## Задание 4. HTTP-запросы, ответы и работа с постами"]},{"cell_type":"markdown","metadata":{"id":"4MjiaxDM58ta"},"source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jZUIdwq96DNl","executionInfo":{"status":"ok","timestamp":1734504895855,"user_tz":-300,"elapsed":150090,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"7d2efa56-6cef-4b0d-b66d-401a208e531e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Всего постов: 100\n","Введи заголовок: 1\n","Введи содержимое поста: привет\n","Введи ID пользователя: 2\n","Созданный пост: {'title': '1', 'body': 'привет', 'userId': 2, 'id': 101}\n","Введи ID поста для обновления: 2\n","Введи новый заголовок: куку\n","Введи новое содержимое: кака\n","Обновлённый пост: {'title': 'куку', 'body': 'кака', 'id': 2}\n"]}],"source":["import requests\n","\n","def get_posts():\n","    url = \"https://jsonplaceholder.typicode.com/posts\"\n","    response = requests.get(url)\n","    return response.json()\n","\n","def get_post_id(post_id):\n","    url = f\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\n","    response = requests.get(url)\n","    return response.json()\n","\n","def post_info(post):\n","    print(f\"ID: {post['id']}\")\n","    print(f\"Заголовок: {post['title']}\")\n","    print(f\"Содержание: {post['body']}\")\n","    print(f\"Автор ID: {post['userId']}\")\n","\n","def create_post(title, body, user_id):\n","    url = \"https://jsonplaceholder.typicode.com/posts\"\n","    post_data = {\n","        \"title\": title,\n","        \"body\": body,\n","        \"userId\": user_id\n","    }\n","    response = requests.post(url, json=post_data)\n","    return response.json()\n","\n","def update_post(post_id, title, body):\n","    url = f\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\n","    post_data = {\n","        \"title\": title,\n","        \"body\": body\n","    }\n","    response = requests.put(url, json=post_data)\n","    return response.json()\n","\n","def delete_post(post_id):\n","    url = f\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\n","    response = requests.delete(url)\n","    return response.status_code\n","\n","posts = get_posts()\n","print(f\"Всего постов: {len(posts)}\")\n","\n","title = input(\"Введи заголовок: \")\n","body = input(\"Введи содержимое поста: \")\n","user_id = int(input(\"Введи ID пользователя: \"))\n","new_post = create_post(title, body, user_id)\n","print(f\"Созданный пост: {new_post}\")\n","\n","post_id = int(input(\"Введи ID поста для обновления: \"))\n","new_title = input(\"Введи новый заголовок: \")\n","new_body = input(\"Введи новое содержимое: \")\n","updated_post = update_post(post_id, new_title, new_body)\n","print(f\"Обновлённый пост: {updated_post}\")"]},{"cell_type":"markdown","metadata":{"id":"0UoRc9vOD3XT"},"source":["## Задание 5. HTTP-запросы, ответы и пёсики"]},{"cell_type":"markdown","metadata":{"id":"y0EyPsFQ6mSZ"},"source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"]},{"cell_type":"markdown","metadata":{"id":"yrKv5k13AKEP"},"source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5xti3KRP4Kzp"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730284842053}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}