{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732700625307}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Фахретдинов Адель Маратович"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","\n","    def __init__(self, name, daily_salary, working_days):\n","        self.name = name\n","        self.daily_salary = daily_salary\n","        self.working_days = working_days\n","\n","    def salary_counter(self):\n","        return self.daily_salary * self.working_days\n","\n","class Manager(Employee):\n","\n","    line_type = 'менеджер'\n","\n","    def __init__(self, name, daily_salary, working_days):\n","        super().__init__(name, daily_salary, working_days)\n","\n","    def salary_counter(self):\n","        salary_manager = super().salary_counter()\n","        return salary_manager\n","\n","\n","class Developer(Employee):\n","\n","    line_type = 'разработчик'\n","    def __init__(self, name, daily_salary, working_days,prize):\n","        super().__init__(name, daily_salary, working_days)\n","        self.prize = prize\n","\n","    def salary_counter(self):\n","        salary_developer = super().salary_counter()\n","        return salary_developer + self.prize"],"metadata":{"id":"TTLy0QrqY-3S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["manager = Manager(\"Anna\", 25, 1300)\n","developer = Developer(\"Timur\", 20, 2500, 15000)\n","\n","print(f\"Зарплата менеджера {manager.name}: {manager.salary_counter()}\")\n","print(f\"Зарплата разработчика {developer.name}: {developer.salary_counter()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YDRrZw7pY7HR","executionInfo":{"status":"ok","timestamp":1733074657104,"user_tz":-300,"elapsed":380,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"52b7b911-21b8-428e-94c9-2f6e9c086b37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата менеджера Anna: 32500\n","Зарплата разработчика Timur: 65000\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Transport:\n","\n","    def __init__(self, title):\n","        self.title = title\n","\n","class Bus(Transport):\n","\n","    line_type = 'автобус'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color\n","\n","class Taxi(Transport):\n","\n","    line_type = 'такси'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color\n","\n","class Tram(Transport):\n","\n","    line_type = 'трамвай'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color"],"metadata":{"id":"aexGXzqCAFH7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bus = Bus(\"Автобус\", 35, \"50 км/ч\", \"зеленый\")\n","taxi = Taxi(\"Такси\", 3, \"90 км/ч\", \"желтый\")\n","tram = Tram(\"Трамвай\", 30, \"35 км/ч\", \"красный\")\n","\n","print(f\"Автобус: {bus.specifications()}\")\n","print(f\"Такси: {taxi.specifications()}\")\n","print(f\"Трамвай: {tram.specifications()}\")"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733077216689,"user_tz":-300,"elapsed":268,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"7ede6b9b-a8e9-4f53-e0c7-4ffa9688c5d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Автобус: (35, '50 км/ч', 'зеленый')\n","Такси: (3, '90 км/ч', 'желтый')\n","Трамвай: (30, '35 км/ч', 'красный')\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":[],"metadata":{"id":"wkCcv_K-Bwdv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":[],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}