{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732700625307}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Фахретдинов Адель Маратович"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","\n","    def __init__(self, name, daily_salary, working_days):\n","        self.name = name\n","        self.daily_salary = daily_salary\n","        self.working_days = working_days\n","\n","    def salary_counter(self):\n","        return self.daily_salary * self.working_days\n","\n","class Manager(Employee):\n","\n","    line_type = 'менеджер'\n","\n","    def __init__(self, name, daily_salary, working_days):\n","        super().__init__(name, daily_salary, working_days)\n","\n","    def salary_counter(self):\n","        salary_manager = super().salary_counter()\n","        return salary_manager\n","\n","\n","class Developer(Employee):\n","\n","    line_type = 'разработчик'\n","    def __init__(self, name, daily_salary, working_days,prize):\n","        super().__init__(name, daily_salary, working_days)\n","        self.prize = prize\n","\n","    def salary_counter(self):\n","        salary_developer = super().salary_counter()\n","        return salary_developer + self.prize"],"metadata":{"id":"TTLy0QrqY-3S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["manager = Manager(\"Anna\", 25, 1300)\n","developer = Developer(\"Timur\", 20, 2500, 15000)\n","\n","print(f\"Зарплата менеджера {manager.name}: {manager.salary_counter()}\")\n","print(f\"Зарплата разработчика {developer.name}: {developer.salary_counter()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YDRrZw7pY7HR","executionInfo":{"status":"ok","timestamp":1733074657104,"user_tz":-300,"elapsed":380,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"52b7b911-21b8-428e-94c9-2f6e9c086b37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата менеджера Anna: 32500\n","Зарплата разработчика Timur: 65000\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Transport:\n","\n","    def __init__(self, title):\n","        self.title = title\n","\n","class Bus(Transport):\n","\n","    line_type = 'автобус'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color\n","\n","class Taxi(Transport):\n","\n","    line_type = 'такси'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color\n","\n","class Tram(Transport):\n","\n","    line_type = 'трамвай'\n","\n","    def __init__(self, title, capacity, speed, color):\n","        super().__init__(title)\n","        self.capacity = capacity\n","        self.speed = speed\n","        self.color = color\n","\n","    def specifications(self):\n","        return self.capacity, self.speed, self.color"],"metadata":{"id":"aexGXzqCAFH7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bus = Bus(\"Автобус\", 35, \"50 км/ч\", \"зеленый\")\n","taxi = Taxi(\"Такси\", 3, \"90 км/ч\", \"желтый\")\n","tram = Tram(\"Трамвай\", 30, \"35 км/ч\", \"красный\")\n","\n","print(f\"Автобус: {bus.specifications()}\")\n","print(f\"Такси: {taxi.specifications()}\")\n","print(f\"Трамвай: {tram.specifications()}\")"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733077216689,"user_tz":-300,"elapsed":268,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"7ede6b9b-a8e9-4f53-e0c7-4ffa9688c5d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Автобус: (35, '50 км/ч', 'зеленый')\n","Такси: (3, '90 км/ч', 'желтый')\n","Трамвай: (30, '35 км/ч', 'красный')\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"3tNvh_3tpsjl"}},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","    def __init__(self, title, price, availability, categories):\n","        self.title = title\n","        self.price = price\n","        self.availability = availability\n","        self.categories = categories\n","\n","    def stock_availability(self, quantity):\n","        return self.availability >= quantity\n","\n","    def decrease(self, quantity):\n","        self.availability -= quantity\n","\n","\n","class Order:\n","    def __init__(self, customer):\n","        self.customer = customer\n","        self.items = []\n","        self.total_price = 0.0\n","        self.discount = 0.0\n","        self.tax = 0.2\n","\n","    def add_items(self, product, quantity):\n","        if product.stock_availability(quantity):\n","            product.decrease(quantity)\n","            items_total = product.price * quantity\n","            self.total_price += items_total\n","            self.items.append((product, quantity))\n","        else:\n","            print(f\"Товара {product.title} недостаточно.\")\n","\n","\n","    def calculater(self):\n","        discounted = self.total_price * (1 - self.discount)\n","        taxes = discounted * self.tax\n","        return discounted + taxes\n","\n","\n","class Customer:\n","    def __init__(self, name):\n","        self.name = name\n","        self.order_history = []\n","\n","    def add_order(self, order):\n","        self.order_history.append(order)\n","\n","\n","class ShoppingCart:\n","    def __init__(self):\n","        self.items = {}\n","\n","    def add_product(self, product, quantity):\n","        if product in self.items:\n","            self.items[product.title]['quantity'] += quantity\n","        else:\n","            self.items[product.title] = {'product': product, 'quantity': quantity}\n","\n","    def remove(self, product_title):\n","        if product_title in self.items:\n","            del self.items[product_title]\n","\n","    def update_quantity(self, product_title, quantity):\n","        if product_title in self.items:\n","            self.items[product_title]['quantity'] = quantity\n","\n","    def view_cart(self):\n","        return self.items"],"metadata":{"id":"wkCcv_K-Bwdv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["product1 = Product(\"хлеб\", 49, 15, [\"черный\"])\n","product2 = Product(\"молоко\", 95, 9, [\"32 %\"])\n","\n","customer = Customer(\"Петя Иванов\")\n","\n","cart = ShoppingCart()\n","\n","cart.add_product(product1, 2)\n","cart.add_product(product2, 3)\n","\n","cart.update_quantity(\"хлеб\", 3)\n","\n","cart.remove(\"молоко\")\n","\n","order = Order(customer)\n","for item in cart.view_cart().values():\n","    product = item['product']\n","    quantity = item['quantity']\n","    order.add_items(product, quantity)\n","\n","total = order.calculater()\n","print(f\"Общая сумма заказа: {total:.2f}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ohG9LzSkvkO","executionInfo":{"status":"ok","timestamp":1734411022637,"user_tz":-300,"elapsed":260,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"bf3649c8-2efd-4a15-9fbe-e6f5fd78e4ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Общая сумма заказа: 176.40\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["class SpaceShip:\n","    def __init__(self, fuel, body, speed):\n","        self.fuel = fuel\n","        self.body = body\n","        self.speed = speed\n","\n","    def increasing_speed(self, change):\n","        if self.fuel >= 0:\n","            self.speed += change\n","            self.fuel -= change * 0.2\n","        else:\n","            self.fuel == 0\n","\n","    def speed_reduction(self, change):\n","        while self.speed >= 0:\n","            self.speed -= change\n","\n","\n","    def status(self):\n","        return f\"Топливо: {self.fuel}, Корпус: {self.body}, Скорость: {self.speed}\"\n","\n","\n","class CrewMember:\n","    def __init__(self, name, health, skills, role):\n","        self.name = name\n","        self.health = health\n","        self.skills = skills\n","        self.role = role\n","\n","    def status(self):\n","        return f\"Имя: {self.name}, Здоровье: {self.health}, Навыки: {', '.join(self.skills)},  Роль: {self.role}\"\n","\n","\n","class Mission:\n","    def __init__(self, goals, resources, events):\n","        self.goals = goals\n","        self.resources = resources\n","        self.events = events\n","\n","    def trigger_event(self, events):\n","        self.events = events\n","        if events == \"Столкновение с астероидом\":\n","            print(\"Столкновение с астероилом. Корабль поврежден!\")\n","    def status(self):\n","        return f\"Цели: {self.goals}; Ресурсы: {self.resources}\"\n"],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["spaceship = SpaceShip(100, 100, 75)\n","crew_member = CrewMember(name=\"John\", health=100, skills=[\"Piloting\", \"Repair\"], role=\"Pilot\")\n","mission = Mission(\"Иследовать планеты, собирать ресурсы\", \"Лунный камень, редкие металлы\", \"Столкновение с астероидом\")\n","\n","print(spaceship.status())\n","print(crew_member.status())\n","print(mission.status())\n","\n","spaceship.increasing_speed(20)\n","print(spaceship.status())\n","\n","mission.trigger_event(\"asteroid_collision\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"69xfSlsWXotq","executionInfo":{"status":"ok","timestamp":1734419278548,"user_tz":-300,"elapsed":240,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"e844ab81-1d1b-43f9-96b6-9b9f5ff8f7d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Топливо: 100, Корпус: 100, Скорость: 75\n","Имя: John, Здоровье: 100, Навыки: Piloting, Repair,  Роль: Pilot\n","Цели: Иследовать планеты, собирать ресурсы; Ресурсы: Лунный камень, редкие металлы\n","Топливо: 96.0, Корпус: 100, Скорость: 95\n"]}]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}