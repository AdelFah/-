{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732097034339}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    # количество дней отпуска, атрибут для каждого объекта класса\n","    vacation_days = 28\n","\n","    def __init__(self, first_name, second_name, gender):\n","        self.first_name = first_name # имя\n","        self.second_name = second_name # фамилия\n","        self.gender = gender # пол\n","        self.remaining_vacation_days = self.vacation_days # количество доступных дней отпуска\n","\n","\n","    # вычитание отгуляных дней\n","    def consume_vacation(self, days):\n","        self.remaining_vacation_days -= days\n","\n","    # Вывод информации об отпуске\n","    def vacation_details(self):\n","        return f\"Остаток отпускных дней: {self.remaining_vacation_days}.\""],"metadata":{"id":"G4bUraN4CwBI","executionInfo":{"status":"ok","timestamp":1732098750898,"user_tz":-300,"elapsed":316,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["employee = Employee('Олег', \"Крутой\", \"м\")\n","employee2 = Employee('Олег', \"не очень Крутой\", \"м\")\n","print('='*20,'\\n',\n","      employee.first_name,'\\n',\n","      employee.second_name,'\\n',\n","      employee.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('='*20,'\\n',\n","      employee2.first_name,'\\n',\n","      employee2.second_name,'\\n',\n","      employee2.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('Олег Крутой в Майами на 10 дней')\n","employee.consume_vacation(10)\n","print('Олег не очень Крутой в Сыктывкар на 4 дней')\n","employee2.consume_vacation(4)\n","\n","\n","print('='*20,'\\n',\n","      employee.first_name,'\\n',\n","      employee.second_name,'\\n',\n","      employee.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('='*20,'\\n',\n","      employee2.first_name,'\\n',\n","      employee2.second_name,'\\n',\n","      employee2.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LN_VkV1aFtZf","executionInfo":{"status":"ok","timestamp":1732098754969,"user_tz":-300,"elapsed":323,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"29627b76-efa2-4ddc-e07c-aaa02a296315"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["==================== \n"," Олег \n"," Крутой \n"," 28 \n"," ==================== \n","\n","==================== \n"," Олег \n"," не очень Крутой \n"," 28 \n"," ==================== \n","\n","Олег Крутой в Майами на 10 дней\n","Олег не очень Крутой в Сыктывкар на 4 дней\n","==================== \n"," Олег \n"," Крутой \n"," 18 \n"," ==================== \n","\n","==================== \n"," Олег \n"," не очень Крутой \n"," 24 \n"," ==================== \n","\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","    sides_number = 4\n","\n","    def __init__(self, width, height):\n","        self.height = height\n","        self.width = width\n","\n","    def count_square(self):\n","        return self.height * self.width\n","\n","    def count_perimeter(self):\n","        return (self.height + self.width)*2\n","\n","    def print_size(self):\n","        return f'Высота: {self.height},\\n Ширина: {self.width}'\n","\n","    def change_size(self, new_widht, new_height):\n","        self.height = new_height\n","        self.width = new_widht"],"metadata":{"id":"dG6uNPqTEAvt","executionInfo":{"status":"ok","timestamp":1732100944041,"user_tz":-300,"elapsed":386,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["some_rectangle = Rectangle(4,3)\n","print(some_rectangle.count_square())\n","\n","print(some_rectangle.count_perimeter())\n","\n","print(some_rectangle.print_size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"znURhuyBP5se","executionInfo":{"status":"ok","timestamp":1732101025430,"user_tz":-300,"elapsed":419,"user":{"displayName":"Adel Show","userId":"11599108646545333078"}},"outputId":"934308c7-7426-43b1-981a-51dd24d50bd1"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["12\n","14\n","Высота: 3,\n"," Ширина: 4\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccontco:\n","\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","        self.balance += amount\n"],"metadata":{"id":"WWXNIUrCE99W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":[],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":[],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}